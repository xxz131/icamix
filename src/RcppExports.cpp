// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// EMInterwovenFastICA
List EMInterwovenFastICA(const arma::mat& DataMtr, const arma::mat& MembershipProbs_, double bandWidth, int maxIteration = 300, int icaIteration = 150, double tolerance = 1e-6, bool verbose = true, bool combine = true);
RcppExport SEXP icamix_EMInterwovenFastICA(SEXP DataMtrSEXP, SEXP MembershipProbs_SEXP, SEXP bandWidthSEXP, SEXP maxIterationSEXP, SEXP icaIterationSEXP, SEXP toleranceSEXP, SEXP verboseSEXP, SEXP combineSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const arma::mat& >::type DataMtr(DataMtrSEXP );
        Rcpp::traits::input_parameter< const arma::mat& >::type MembershipProbs_(MembershipProbs_SEXP );
        Rcpp::traits::input_parameter< double >::type bandWidth(bandWidthSEXP );
        Rcpp::traits::input_parameter< int >::type maxIteration(maxIterationSEXP );
        Rcpp::traits::input_parameter< int >::type icaIteration(icaIterationSEXP );
        Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP );
        Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP );
        Rcpp::traits::input_parameter< bool >::type combine(combineSEXP );
        List __result = EMInterwovenFastICA(DataMtr, MembershipProbs_, bandWidth, maxIteration, icaIteration, tolerance, verbose, combine);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// WtsFastICA
List WtsFastICA(const arma::mat& X, const arma::vec& wts, const arma::mat& Wconst, bool verbose = true, double alpha = 1, int maxIteration = 60, double tolerance = 1e-6);
RcppExport SEXP icamix_WtsFastICA(SEXP XSEXP, SEXP wtsSEXP, SEXP WconstSEXP, SEXP verboseSEXP, SEXP alphaSEXP, SEXP maxIterationSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP );
        Rcpp::traits::input_parameter< const arma::vec& >::type wts(wtsSEXP );
        Rcpp::traits::input_parameter< const arma::mat& >::type Wconst(WconstSEXP );
        Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP );
        Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP );
        Rcpp::traits::input_parameter< int >::type maxIteration(maxIterationSEXP );
        Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP );
        List __result = WtsFastICA(X, wts, Wconst, verbose, alpha, maxIteration, tolerance);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// WtsKde
List WtsKde(const arma::vec& X, const arma::vec& wts, const arma::vec& grid, double h);
RcppExport SEXP icamix_WtsKde(SEXP XSEXP, SEXP wtsSEXP, SEXP gridSEXP, SEXP hSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const arma::vec& >::type X(XSEXP );
        Rcpp::traits::input_parameter< const arma::vec& >::type wts(wtsSEXP );
        Rcpp::traits::input_parameter< const arma::vec& >::type grid(gridSEXP );
        Rcpp::traits::input_parameter< double >::type h(hSEXP );
        List __result = WtsKde(X, wts, grid, h);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
